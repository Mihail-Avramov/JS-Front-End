array.pop() - връща последния елемент и го премахва от масива
array.push(element) - добавя елемент в края на масива
array.shift() - връща първия елемент и го премахва от масива
array.unshift(element) - добавя елемент в началото на масива
array.length - връща броя на елементите в масива
array[index] - връща елемента на индекс index от масива
array[index] = value - променя елемента на индекс index от масива на стойност value
array.sort() - сортира елементите на масива
array.reverse() - обръща реда на елементите в масива
array.splice(index, howmany, item1, ....., itemX) - добавя и/или премахва елементи от масива
array.slice(start, end) - изрязва част от масива и връща нов масив
array.concat(array1, array2, ..., arrayX) - създава нов масив като залепя към array списък с масиви (един или повече) един след друг
array.join(separator) - създава и връща нов низ като залепя всички елементи на масива, разделени със separator
array.indexOf(item, start) - връща индекса на първото срещане на item в масива, започвайки от индекс start
array.lastIndexOf(item, start) - връща индекса на последното срещане на item в масива, започвайки от индекс start
array.includes(item, start) - връща true ако item се съдържа в масива, започвайки от индекс start
array.find(function(currentValue, index, arr),thisValue) - връща първия елемент, който отговаря на условието в функцията
array.findIndex(function(currentValue, index, arr),thisValue) - връща индекса на първия елемент, който отговаря на условието в функцията
array.filter(function(currentValue, index, arr),thisValue) - създава и връща нов масив с всички елементи, които отговарят на условието в функцията
array.every(function(currentValue, index, arr),thisValue) - връща true ако всички елементи отговарят на условието в функцията
array.some(function(currentValue, index, arr),thisValue) - връща true ако поне един елемент отговаря на условието в функцията
array.map(function(currentValue, index, arr),thisValue) - създава и връща нов масив с резултатите от изпълнението на функцията върху всеки елемент от масива
array.reduce(function(total, currentValue, currentIndex, arr), initialValue) - изпълнява функцията върху всеки елемент от масива, за да генерира (reduce) един резултат
array.reduceRight(function(total, currentValue, currentIndex, arr), initialValue) - изпълнява функцията върху всеки елемент от масива, за да генерира (reduce) един резултат, започвайки от последния елемент
array.forEach(function(currentValue, index, arr),thisValue) - изпълнява функцията върху всеки елемент от масива
array.keys() - връща итератор, който съдържа индексите на всеки елемент от масива
array.values() - връща итератор, който съдържа стойностите на всеки елемент от масива
array.entries() - връща итератор, който съдържа двойки от индекс и стойност на всеки елемент от масива
array.fill(value, start, end) - променя всички елементи на масива със стойност value, започвайки от индекс start и до (но не включително) индекс end
array.copyWithin(target, start, end) - копира елементите от масива, започвайки от индекс start и до (но не включително) индекс end, в индекс target
array.flat(depth) - създава нов масив с елементите на масива и на всички негови подмасиви, до дълбочина depth
array.flatMap(function(currentValue, index, arr),thisValue) - създава и връща нов масив с резултатите от изпълнението на функцията върху всеки елемент от масива и на всички негови подмасиви, до дълбочина 1
array.from(arrayLike, function(currentValue, index, arr), thisValue) - създава нов масив от arrayLike обект или итерируем обект, като изпълнява функцията върху всеки елемент от него
array.of(element0, element1, ..., elementN) - създава нов масив от аргументите, подадени на метода
array.toLocaleString(locales, options) - създава и връща нов низ като залепя всички елементи на масива, разделени със запетая, превеждайки ги според настройките за локализация
array.toString() - създава и връща нов низ като залепя всички елементи на масива, разделени със запетая

Object.keys(obj) - връща масив с всички ключове на обекта obj
Object.values(obj) - връща масив с всички стойности на обекта obj
Object.entries(obj) - връща масив с двойки от ключ и стойност на обекта obj
Object.hasOwnProperty(prop) - връща true ако обекта има свойство prop
Object.assign(target, ...sources) - копира всички свойства от един или повече обекти sources в обекта target
Object.freeze(obj) - замразява обекта obj, което означава, че неговите свойства не могат да бъдат променяни или изтривани
Object.seal(obj) - запечатва обекта obj, което означава, че неговите свойства не могат да бъдат изтривани
Object.isFrozen(obj) - връща true ако обекта obj е замразен
Object.isSealed(obj) - връща true ако обекта obj е запечатан
Object.isExtensible(obj) - връща true ако обекта obj позволява добавяне на нови свойства
Object.preventExtensions(obj) - прави обекта obj неразширяем, което означава, че не могат да бъдат добавяни нови свойства
Object.getOwnPropertyDescriptor(obj, prop) - връща дескриптора на свойството prop на обекта obj
Object.defineProperty(obj, prop, descriptor) - дефинира свойството prop на обекта obj с дескриптора descriptor
Object.defineProperties(obj, props) - дефинира свойствата на обекта obj с дескрипторите props
Object.getPrototypeOf(obj) - връща прототипа на обекта obj
Object.setPrototypeOf(obj, prototype) - задава прототипа prototype на обекта obj
Object.is(obj1, obj2) - връща true ако обектите obj1 и obj2 са еднакви
Object.getOwnPropertyNames(obj) - връща масив с всички имена на свойствата на обекта obj
Object.getOwnPropertySymbols(obj) - връща масив с всички символни имена на свойствата на обекта obj
Object.getOwnPropertyDescriptor(obj, prop) - връща дескриптора на свойството prop на обекта obj
Object.keys(obj) - връща масив с всички ключове на обекта obj
Object.values(obj) - връща масив с всички стойности на обекта obj
Object.entries(obj) - връща масив с двойки от ключ и стойност на обекта obj
Object.fromEntries(entries) - създава и връща нов обект от масива с двойки от ключ и стойност entries

Object.entries(obj).forEach(([key, value]) => console.log(`${key} ${value}`)) - принтира ключ и стойност на всеки елемент от обекта obj
Object.entries(obj).map(([key, value]) => ({ key, value })) - създава и връща нов обект с ключ и стойност на всеки елемент от обекта obj
Object.entries(obj).filter(([key, value]) => value > 10) - създава и връща нов масив с двойки от ключ и стойност на всеки елемент от обекта obj, където стойността е по-голяма от 10
Object.entries(obj).find(([key, value]) => value > 10) - връща първия елемент от масива с двойки от ключ и стойност на всеки елемент от обекта obj, където стойността е по-голяма от 10
Object.entries(obj).findIndex(([key, value]) => value > 10) - връща индекса на първия елемент от масива с двойки от ключ и стойност на всеки елемент от обекта obj, където стойността е по-голяма от 10
Object.entries(obj).some(([key, value]) => value > 10) - връща true ако поне един елемент от масива с двойки от ключ и стойност на всеки елемент от обекта obj отговаря на условието
Object.entries(obj).every(([key, value]) => value > 10) - връща true ако всички елементи от масива с двойки от ключ и стойност на всеки елемент от обекта obj отговарят на условието
Object.entries(obj).reduce((acc, [key, value]) => acc + value, 0) - връща сумата на стойностите на всички елементи от масива с двойки от ключ и стойност на всеки елемент от обекта obj
Object.entries(obj).reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}) - създава и връща нов обект с ключ и стойност на всеки елемент от обекта obj
Object.entries(obj).reduceRight((acc, [key, value]) => ({ ...acc, [key]: value }), {}) - създава и връща нов обект с ключ и стойност на всеки елемент от обекта obj, започвайки от последния елемент

--------------------------------------------------------------------
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});

const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});
--------------------------------------------------------------------
concat
arrayResult = array1.concat(array2,array3) - създава нов масив като залепя към array1 списък с масиви (един или повече) един след друг
--------------------------------------------------------------------
array.flat()
- method creates a new array with sub-array elements concatenated to a specified depth
const myArr = [[1,2],[3,4],[5,6]];
const newArr = myArr.flat(); => [1, 2, 3, 4, 5, 6]
--------------------------------------------------------------------
array.splice()
(1) - method can be used to add new items to an array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");
The first parameter (2) defines the position where new elements should be added (spliced in).
The second parameter (0) defines how many elements should be removed.
The rest of the parameters ("Lemon" , "Kiwi") define the new elements to be added.
(2) - method can be used to add new items and to remove items to an array
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let removed = fruits.splice(2, 2, "Lemon", "Kiwi");
console.log(removed) => Apple,Mango
console.log(fruits) => Banana,Orange,Lemon,Kiwi
(3) - Using splice() to Remove Elements
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0, 1);
console.log(fruits) => "Orange", "Apple", "Mango"
--------------------------------------------------------------------
array.slice()
The slice() method creates a new array.
The slice() method does not remove any elements from the source array.
(1) - method slices out a piece of an array into a new array
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(3);
console.log(citrus) => Apple, Mango
(2) - method can take two arguments like slice(1, 3).
The method then selects elements from the start argument, and up to (but not including) the end argument.
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1,3);
console.log(citrus) => Orange, Lemon
--------------------------------------------------------------------
